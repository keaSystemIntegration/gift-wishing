version: '3.4'
services:
    lb:
        build: ./haproxy
        ports:
            - '80:80'
            - '22:22'
        volumes:
            - ./haproxy:/usr/local/etc/haproxy
        restart: on-failure

    rabbitmq-server:
        container_name: rabbitmq-server
        build: ./modules/rabbitmq-server
        environment:
            - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
        # ports:
        #     - '5672:5672'
        #     - '15672:15672'

    sftp-service:
        container_name: sftp-service
        build:
          context: ./modules/sftp-service
          dockerfile: ./Dockerfile
          args:
            - SFTP_SERVICE_USERNAME=$SFTP_SERVICE_USERNAME
            - SFTP_SERVICE_PASSWORD=$SFTP_SERVICE_PASSWORD
        volumes:
            - sftp-upload:/home/$SFTP_SERVICE_USERNAME/upload
        environment:
          - SFTP_SERVICE_USERNAME=$SFTP_SERVICE_USERNAME
          - RABBITMQ_SERVICE_HOST=$RABBITMQ_SERVICE_HOST
          - RABBITMQ_SERVICE_USER=$RABBITMQ_SERVICE_USER
          - RABBITMQ_SERVICE_PASSWORD=$RABBITMQ_SERVICE_PASSWORD
        depends_on:
            - rabbitmq-server

    products-service:
        build: ./modules/products-service
        container_name: products-service
        environment:
            - PORT=$PRODUCTS_SERVICE_POST
            - DATABASE_URL=$PRODUCTS_SERVICE_URL
            - SFTP_SERVICE_URL=$SFTP_SERVICE_URL
            - SFTP_SERVICE_USERNAME=$SFTP_SERVICE_USERNAME
            - SFTP_SERVICE_PASSWORD=$SFTP_SERVICE_PASSWORD
            - RABBITMQ_SERVICE_HOST=$RABBITMQ_SERVICE_HOST
            - RABBITMQ_SERVICE_USER=$RABBITMQ_SERVICE_USER
            - RABBITMQ_SERVICE_PASSWORD=$RABBITMQ_SERVICE_PASSWORD
        restart: on-failure #find a better solution for timing the docker image
        depends_on:
            - sftp-service
            - rabbitmq-server

    user-service:
        build:
            context: ./modules/user-service
            target: production
        environment:
            - NODE_ENV=production
            - USER_SERVICE_PORT=${USER_SERVICE_PORT}
            - USER_SERVICE_NEO4J_URL=${USER_SERVICE_NEO4J_URL}
            - USER_SERVICE_NEO4J_USERNAME=${USER_SERVICE_NEO4J_USERNAME}
            - USER_SERVICE_NEO4J_PASSWORD=${USER_SERVICE_NEO4J_PASSWORD}
            - USER_SERVICE_AURA_INSTANCENAME=${USER_SERVICE_AURA_INSTANCENAME}
            - USER_SERVICE_JWT_SECRET=${USER_SERVICE_JWT_SECRET}
            - USER_SERVICE_SIGNUP_URL=${USER_SERVICE_SIGNUP_URL}
            - EMAIL_SERVER_URL_LOCAL=${EMAIL_SERVER_URL_LOCAL}
            - EMAIL_SERVER_URL_PROD=${EMAIL_SERVER_URL_PROD}
            - EMAIL_SERVER_ACCESS_TOKEN=${EMAIL_SERVER_ACCESS_TOKEN}
            - EMAIL_SERVER_SENDER_EMAIL=${EMAIL_SERVER_SENDER_EMAIL}
            - EMAIL_SERVER_SENDER_PASSWORD=${EMAIL_SERVER_SENDER_PASSWORD}

    auth-service:
        build: ./modules/auth-service
        environment:
            - APPID=4500
            - MONGO_USERNAME=${MONGO_USERNAME}
            - MONGO_PASSWORD=${MONGO_PASSWORD}
            - MONGO_DATABASE=${MONGO_DATABASE}
            - JWT_SECRET=${JWT_SECRET}
    
    wishlist-service:
        build:
            context: ./modules/wishlist-service
            target: production
        environment:
            - WISHLIST_SERVICE_PORT=${WISHLIST_SERVICE_PORT}
            - WISHLIST_CONNECTION_URL=${WISHLIST_CONNECTION_URL}
       

    friend-status-service:
        build:
            context: ./modules/friend-status-service
            target: production
        environment:
            - FRIEND_STATUS_SERVICE_PORT=${FRIEND_STATUS_SERVICE_PORT}
volumes:
    sftp-upload:
    haproxy:

